var sliderCore = (function (exports) {
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var SpeedCalculator = (function () {
        function SpeedCalculator(cacheNum) {
            this.cacheNum = cacheNum;
            this.speedList = [];
        }
        SpeedCalculator.prototype.reset = function () {
            this.speedList = [];
        };
        SpeedCalculator.prototype.add = function (speedNum) {
            this.speedList.push(speedNum);
            if (this.speedList.length > this.cacheNum) {
                this.speedList.shift();
            }
        };
        SpeedCalculator.prototype.get = function () {
            if (this.speedList.length === 0)
                return 0;
            var result = this.speedList.reduce(function (prev, next) {
                return prev + next;
            }) / this.speedList.length;
            return result;
        };
        return SpeedCalculator;
    }());

    var InitialSliderOptions = {
        isLoop: false,
        isFit: false,
        initialIndex: 0,
    };

    var Slider = (function () {
        function Slider() {
            this.currentX = 0;
            this.elementNum = 0;
            this.deltaTime = 0;
            this.deltaMove = 0;
            this.speedCalc = new SpeedCalculator(5);
        }
        Slider.prototype.init = function (width, viewElementNum, options) {
            var setOption = __assign(__assign({}, InitialSliderOptions), options);
            this.width = width;
            this.elementNum = viewElementNum;
            this.itemWidth = this.width / this.elementNum;
            this.isLoop = setOption.isLoop;
            this.isFit = setOption.isFit;
            this.currentX = setOption.initialIndex * this.itemWidth;
            this.handleChange();
        };
        Slider.prototype.start = function (x) {
            cancelAnimationFrame(this.animationID || 0);
            this.deltaMove = x;
            this.speedCalc.reset();
        };
        Slider.prototype.update = function (x) {
            var moveOffset = this.deltaMove - x;
            this.deltaTime = this.deltaTime - performance.now();
            this.currentX += moveOffset;
            this.updateLocation();
            this.handleChange();
            this.speedCalc.add(moveOffset / this.deltaTime * 50);
            this.deltaTime = performance.now();
            this.deltaMove = x;
        };
        Slider.prototype.handleChange = function () {
            var index = Math.round(this.currentX / this.itemWidth);
            this.onChange && this.onChange(this.currentX, index);
        };
        Slider.prototype.updateLocation = function () {
            var maxLength = this.itemWidth * this.elementNum;
            if (this.isLoop) {
                if (this.currentX < 0) {
                    this.currentX = maxLength + (this.currentX % maxLength);
                    return;
                }
                this.currentX %= maxLength;
                return;
            }
            else {
                if (this.currentX < 0) {
                    this.currentX = 0;
                    return;
                }
                if (this.currentX > maxLength) {
                    this.currentX = maxLength;
                    return;
                }
            }
        };
        Slider.prototype.end = function () {
            var speed = this.speedCalc.get() * 5;
            var movementPosition = this.isFit ? (speed - ((this.currentX % this.itemWidth) + (speed % this.itemWidth))) : speed;
            var maxTime = Math.max(Math.abs(speed / 5), 100);
            this.moveTo(movementPosition, maxTime);
        };
        Slider.prototype.next = function (duration) {
            if (duration === void 0) { duration = 100; }
            this.currentX % this.itemWidth - this.itemWidth;
            this.moveTo(this.itemWidth, duration);
        };
        Slider.prototype.prev = function (duration) {
            if (duration === void 0) { duration = 100; }
            this.moveTo(-this.itemWidth, duration);
        };
        Slider.prototype.setIndex = function (index, duration) {
            if (duration === void 0) { duration = 1000; }
            var target = (index) * this.itemWidth;
            this.moveTo(target - this.currentX, duration);
        };
        Slider.prototype.moveTo = function (movementPosition, maxTime) {
            var _this = this;
            var deltaTime = 0;
            var elapsedTime = 0;
            var position = this.currentX;
            var tick = function (time) {
                if (elapsedTime > maxTime) {
                    _this.currentX = position - movementPosition;
                    _this.updateLocation();
                    _this.handleChange();
                    _this.onEnd && _this.onEnd();
                    return;
                }
                deltaTime = time - deltaTime;
                elapsedTime += deltaTime;
                var offsetPosition = Math.sin((elapsedTime / maxTime) * (Math.PI / 2));
                var movement = offsetPosition * movementPosition;
                _this.currentX = position - movement;
                _this.updateLocation();
                _this.handleChange();
                deltaTime = time;
                _this.animationID = window.requestAnimationFrame(function (time) {
                    tick(time);
                });
            };
            this.animationID = window.requestAnimationFrame(function (time) {
                window.requestAnimationFrame(tick);
                deltaTime = time;
            });
        };
        return Slider;
    }());

    exports.Slider = Slider;

    return exports;

}({}));
